var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']}}),c=[{id:0,href:"/docs/prologue/introduction/",title:"Introduction",description:"e2immu is a static code analyser for Java",content:'\u003ch2 id="welcome"\u003eWelcome\u003c/h2\u003e\n\u003cp\u003eWelcome to the \u003cem\u003ee2immu\u003c/em\u003e documentation.\u003c/p\u003e\n\u003cp\u003eWe recommend \u003ca href="/road-to-immutability/000-main.html"\u003eThe Road to Immutability →\u003c/a\u003e as a first introduction to the analyser. This document is also available as PDF in the \u003ca href="/docs/prologue/tutorials/"\u003eTutorials →\u003c/a\u003e section.\u003c/p\u003e\n\u003cp\u003eAll downloads (sources, jars) can be found on \u003cem\u003ee2immu\u003c/em\u003e\u0026rsquo;s \u003ca href="https://github.com/e2immu"\u003eGitHub page →\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="timeline"\u003eTimeline\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003ee2immu\u003c/em\u003e is not ready yet. While all concepts are stable, the analyser is not robust enough yet to be applied in production settings.\u003c/p\u003e\n\u003cp\u003eWe try to adhere to the following timing:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1st May 2021: open source release\u003c/li\u003e\n\u003cli\u003e1st August 2021: alpha release, one IDE plugin working\u003c/li\u003e\n\u003cli\u003e1st November 2021: beta release, one IDE plugin working, can analyse most of its own code\u003c/li\u003e\n\u003cli\u003e1st January 2022: version 1.0.0\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="contibuting"\u003eContibuting\u003c/h2\u003e\n\u003cp\u003ePlease consider contribute to this open source project. You can make valuable\ncontributions, according to your specialisation, interests and capabilities.\nRead more \u003ca href="/docs/prologue/contributing/"\u003ehere →\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="sponsoring"\u003eSponsoring\u003c/h2\u003e\n\u003cp\u003eNo time to contribute, but you think this project may be worthwhile?\nIBTECH BV, a limited company under Belgian law, can write invoices to improve aspects of the analyser of your choice.\nPlease contact \u003ca href="mailto:bart.naudts@e2immu.org"\u003eBart Naudts\u003c/a\u003e.\u003c/p\u003e\n'},{id:1,href:"/docs/prologue/tutorials/",title:"Tutorials",description:"List of all tutorials.",content:'\u003cp\u003eThe main tutorial to the concepts of the \u003cem\u003ee2immu\u003c/em\u003e analyser is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/road-to-immutability/000-main.html"\u003eThe Road to Immutability →\u003c/a\u003e,\n\u003ca href="/road-to-immutability.pdf"\u003ePDF\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSome slide decks are available:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href="/powerpoint/SlideDeck1.pptx"\u003eSlide deck 1\u003c/a\u003e: an \u003cem\u003ee2immu\u003c/em\u003e tutorial\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href="/powerpoint/SlideDeck2.pptx"\u003eSlide deck 2\u003c/a\u003e: slides about the \u003cem\u003ee2immu\u003c/em\u003e project\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:2,href:"/docs/help/manuals/",title:"Manuals",description:"List of all manuals.",content:'\u003cp\u003eThe main manual is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/manual/000-main.html"\u003ee2immu manual →\u003c/a\u003e,\n\u003ca href="/manual.pdf"\u003ePDF\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis manual needs additional work.\u003c/p\u003e\n'},{id:3,href:"/docs/help/javadocs/",title:"Javadoc",description:"List of all Javadocs.",content:'\u003cp\u003eThe javadocs of the e2immu-support-x.x.x.jar can be found \u003ca href="/e2immu-support-javadoc/index.html"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n'},{id:4,href:"/docs/prologue/contributing/",title:"Contributing",description:"Contibuting to e2immu",content:'\u003ch2 id="project-governance"\u003eProject Governance\u003c/h2\u003e\n\u003cp\u003eThe e2immu project is sponsored by IBTECH BV, a limited liability company under Belgian law. The project welcomes\ncontributions from the community.\u003c/p\u003e\n\u003ch3 id="goal"\u003eGoal\u003c/h3\u003e\n\u003cp\u003eIBTECH aims for the e2immu analyser to become a solid, dependable tool in promoting and enforcing immutability\nconstraints in recent versions of Java. Until this goal is reached, it will try to avoid widening the scope of the\nanalyser in the direction of, for example, a general code analyser, or the ability to analyser other programming\nlanguages.\u003c/p\u003e\n\u003ch3 id="contributions"\u003eContributions\u003c/h3\u003e\n\u003cp\u003eAll contributors are expected to sign a \u003ca href="http://"\u003eContributor License Agreement\u003c/a\u003e (CLA) that protects their intellectual\nproperty rights, and at the same time gives IBTECH the legal means to manage the project.\u003c/p\u003e\n\u003cp\u003eThe CLA contains a provision that prevents IBTECH from making the license more restrictive. It does allow IBTECH to make\nthe license more permissive (e.g. from LGPLv3 to Apache License v2).\u003c/p\u003e\n\u003cp\u003eGit and Github will be used to track individual contributions.\u003c/p\u003e\n\u003ch2 id="covenant"\u003eCovenant\u003c/h2\u003e\n\u003cp\u003eThe project will be managed by IBTECH and community project leads according the professional and civil collaboration\nrules described in the \u003ca href="https://www.contributor-covenant.org/version/2/0/code_of_conduct/"\u003eContributor Covenant\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="how-to-contribute"\u003eHow to contribute\u003c/h2\u003e\n\u003cp\u003eOnce you have agreed to the CLA, there are many parts of the analyser ecosystem where you can make valuable\ncontributions, according to your specialisation, interests or capabilities.\u003c/p\u003e\n\u003cp\u003eAlways use issues to attach a merge request, and try to be as concise as possible in defining issues.\u003c/p\u003e\n\u003ch3 id="bug-reports-minor-fixes-and-test-examples"\u003eBug reports, minor fixes, and test examples\u003c/h3\u003e\n\u003cp\u003eEspecially now in the early phase, this area offers rich pickings, as the analyser is not that stable yet. Make sure\nyou\u0026rsquo;re testing against the latest version of the analyser.\u003c/p\u003e\n\u003cp\u003eIt is important to write test examples that are as concise as possible.\u003c/p\u003e\n\u003ch3 id="library-annotations"\u003eLibrary annotations\u003c/h3\u003e\n\u003cp\u003eThe topic of library annotations can be worked on indefinitely. Once the analyser is sufficiently stable, it can propose\nan annotated API, which can then be improved manually.\u003c/p\u003e\n\u003ch3 id="user-interfaces"\u003eUser interfaces\u003c/h3\u003e\n\u003cp\u003eThis topic can generally be split into two important aspects: design, and the different implementations.\u003c/p\u003e\n\u003cp\u003eThe design aspect centers around the most informative and least intrusive way of conveying the analyser\u0026rsquo;s information.\u003c/p\u003e\n\u003cp\u003eImplementations focus on the different IDEs, and the infrastructure necessary to run the analyser in the background.\u003c/p\u003e\n\u003ch3 id="documentation-and-tutorials"\u003eDocumentation and tutorials\u003c/h3\u003e\n\u003cp\u003eThe educational aspect of the analyser is important. I\u0026rsquo;d almost say there cannot be sufficient material to promote good\nsoftware engineering practices.\u003c/p\u003e\n\u003cp\u003eSecondly, the analyser is a living piece of code, and catching up with the technical specification is a task in itself.\u003c/p\u003e\n\u003cp\u003eTranslations of key documents are welcomed as well, especially to promote the immutability concepts to aspiring or\nstarting software developers. No one should be constrained in their programming skills by a lack of understanding of\nEnglish.\u003c/p\u003e\n\u003cp\u003eFinally, because many non-native speakers contribute in their second or third language, we welcome improved re-phrasings\nin case the text deviates too much from natural language.\u003c/p\u003e\n\u003ch3 id="the-analyser-core"\u003eThe analyser core\u003c/h3\u003e\n\u003cp\u003eContributing to the analyser core is not for the faint of heart, and probably requires a decent investment in time and\neffort before you can make meaningful improvements or extensions.\u003c/p\u003e\n\u003ch2 id="coding-guidelines"\u003eCoding Guidelines\u003c/h2\u003e\n\u003cp\u003eContributions are expected to follow the coding guidelines promoted by the e2immu project itself as described in\nthe \u003ca href="/road-to-immutability/000-main.html"\u003eRoad to Immutability\u003c/a\u003e. This includes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emaking use of immutable or eventually immutable types as much as possible\u003c/li\u003e\n\u003cli\u003eavoiding types that cannot be marked \u003ccode\u003e@Container\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCode formatting follows the default rules of the IntelliJ IDEA. IntelliJ\u0026rsquo;s green tick box is mandatory.\u003c/p\u003e\n'},{id:5,href:"/docs/help/plugins/",title:"Plugins",description:"e2immu in your set-up",content:'\u003ch2 id="gradle-plugin"\u003eGradle plugin\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href="https://github.com/e2immu/e2immu/tree/main/gradle-plugin"\u003eGradle plugin\u003c/a\u003e helps integrating the analyser in your Gradle workflow.\u003c/p\u003e\n\u003cp\u003eAll details about configuring the Gradle plugin are in the manual, see \u003ca href="/docs/help/manuals/"\u003eManuals →\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="intellij-idea-plugin"\u003eIntelliJ IDEA plugin\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href="https://github.com/e2immu/e2immu-intellij-plugin"\u003eIntelliJ plugin\u003c/a\u003e is a highlighter for the IntelliJ IDEA. It shows the immutability of classes computed by the analyser in your source code editor.\u003c/p\u003e\n\u003cp\u003eThe set-up involves a helper application, the \u003ca href="https://github.com/e2immu/e2immu-annotation-store"\u003eannotation store\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe plugin\u0026rsquo;s operation is described in the manual, see \u003ca href="/docs/help/manuals/"\u003eManuals →\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="plugins-for-other-ides"\u003ePlugins for other IDEs\u003c/h2\u003e\n\u003cp\u003eThere is no Eclipse plugin yet, nor one for any other IDE.\u003c/p\u003e\n\u003cp\u003eHowever, the setup with an annotation store allows collaboration between multiple developers, some who use Eclipse, some who use IntelliJ. As long as they upload their (part of) the analyser\u0026rsquo;s results to the common store, they can both see each other\u0026rsquo;s immutability information.\u003c/p\u003e\n'},{id:6,href:"/docs/help/dependencies/",title:"Dependencies",description:"Dependencies of e2immu",content:'\u003cp\u003eThe analyser primarily depends on\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://javaparser.org/"\u003eJavaParser.org\u003c/a\u003e to parse Java source files;\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://asm.ow2.io/"\u003eASM\u003c/a\u003e to parse Java byte-code.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLike many other Java projects, it also uses\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="http://www.slf4j.org/"\u003eslf4j\u003c/a\u003e and  \u003ca href="https://logback.qos.ch/"\u003eLogBack\u003c/a\u003e for logging;\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://commons.apache.org/proper/commons-io/"\u003ecommons.io\u003c/a\u003e for reading and writing to files;\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://junit.org/junit5/"\u003eJUnit 5\u003c/a\u003e for testing.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe annotation store uses\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://vertx.io/"\u003eVertx.io\u003c/a\u003e for configuration and HTTP communication.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eObviously, the Gradle plugin links to Gradle libraries, and the IntelliJ highlighter to Jetbrains libraries.\u003c/p\u003e\n'},{id:7,href:"/docs/help/reporting-bugs/",title:"Reporting bugs",description:"How to report bugs?",content:'\u003cp\u003eThe easiest way to report a bug is to create an issue in GitHub:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a \u003ca href="https://github.com/e2immu/e2immu/issues/new?template=bug-report---.md"\u003ebug report for the analyser\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:8,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked or important questions.",content:'\u003ch2 id="what-is-e2immu"\u003eWhat is e2immu?\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003ee2immu\u003c/em\u003e is a static code analyser for modern Java. It aims to help you write better code by\nmaking you aware of unwanted constructs, possible causes for exceptions etc. Even if it includes many \u0026ldquo;standard\u0026rdquo;\nwarnings, \u003cem\u003ee2immu\u003c/em\u003e is not a general code analyser:\nit focuses on modification and immutability. It is able to detect that classes are immutable in practice, or not, and\nwhy they are not.\u003c/p\u003e\n\u003cp\u003eIt also provides a practical definition of such immutability, called \u0026ldquo;effective immutability\u0026rdquo;. It can detect that\nclasses are \u003cem\u003eeventually\u003c/em\u003e immutable, i.e., they become effectively immutable after an initialisation phase. It provides\nsome out-of-the-box classes that help with making your own code eventually immutable.\u003c/p\u003e\n\u003cp\u003eIdeally, the results of the analyser are shown directly in your programming environment. At the moment, a plugin for\nIntelliJ is in development. Support for Eclipse and Visual Studio Code are planned.\u003c/p\u003e\n\u003ch2 id="why-the-lgpl-license"\u003eWhy the LGPL license?\u003c/h2\u003e\n\u003cp\u003eIt allows you to write and distribute commercial software that incorporates the analyser.\nBecause of LGPL, I\u0026rsquo;m hoping that everyone can benefit from your improvements to the analyser.\u003c/p\u003e\n\u003ch2 id="technical-questions"\u003eTechnical questions\u003c/h2\u003e\n\u003ch3 id="illegalstateexception"\u003eIllegalStateException\u003c/h3\u003e\n\u003cp\u003eThe following exception is one of the two more common problems in the analyser:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e07:50:04.282 [Test worker] ERROR org.e2immu.analyser.util.EventuallyFinalExtension - Overwriting effectively value: old: nullable instance type String, new object.toString()\n07:50:04.282 [Test worker] WARN org.e2immu.analyser.analyser.StatementAnalyser - Caught exception while analysing statement 3 of org.e2immu.analyser.testexample.Store_0.flexible(java.lang.Object,long)\n07:50:04.282 [Test worker] WARN org.e2immu.analyser.analyser.StatementAnalyser - Caught exception while analysing block 0 of: org.e2immu.analyser.testexample.Store_0.flexible(java.lang.Object,long)\n07:50:04.282 [Test worker] WARN org.e2immu.analyser.analyser.MethodAnalyser - Caught exception in method analyser: org.e2immu.analyser.testexample.Store_0.flexible(java.lang.Object,long)\n07:50:04.282 [Test worker] WARN org.e2immu.analyser.parser.Parser - Caught runtime exception while analysing type org.e2immu.analyser.testexample.Store_0\n\nTrying to overwrite final value\njava.lang.IllegalStateException: Trying to overwrite final value\n	at org.e2immu.support.EventuallyFinal.setFinal(EventuallyFinal.java:36)\n	at org.e2immu.analyser.util.EventuallyFinalExtension.setFinalAllowEquals(EventuallyFinalExtension.java:35)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe exception shows that because of internal problems, the analyser violates the core rule that once a decision on a topic has been made, it can never be changed anymore. The warning lines show which part of the source code caused the problem; the error line shows the competing values.\u003c/p\u003e\n\u003ch3 id="more-than-10-iterations-needed"\u003eMore than 10 iterations needed\u003c/h3\u003e\n\u003cp\u003eThe second common exception is the \u0026ldquo;More than 10 iterations needed\u0026rdquo; one, really the opposite of the former.\nIt indicates that for a certain topic, no decision was reached, and delays kept coming iteration after iteration.\nThe cause is typically more difficult to pinpoint, and a \u003cem\u003edelay report\u003c/em\u003e is written in logger warnings.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejava.lang.UnsupportedOperationException: More than 10 iterations needed for primary type org.e2immu.kvstore.Store?\n        at org.e2immu.analyser.analyser.PrimaryTypeAnalyser.analyse(PrimaryTypeAnalyser.java:203)\n        at org.e2immu.analyser.parser.Parser.analyseSortedType(Parser.java:191)\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:9,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""},{id:10,href:"/docs/prologue/",title:"Prologue",description:"Prologue e2immu.",content:""},{id:11,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}];b.add(c),userinput.addEventListener('input',e,!0),suggestions.addEventListener('click',f,!0);function e(){var g=this.value,e=b.search(g,5),f=suggestions.childNodes,h=0,i=e.length,c;for(suggestions.classList.remove('d-none'),e.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.href,t.textContent=b.title,d.textContent=b.description,suggestions.appendChild(c)});f.length>i;)suggestions.removeChild(f[h])}function f(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()